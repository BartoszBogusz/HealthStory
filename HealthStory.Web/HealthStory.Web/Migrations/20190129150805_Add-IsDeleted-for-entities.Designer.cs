// <auto-generated />
using System;
using HealthStory.Web.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HealthStory.Web.Migrations
{
    [DbContext(typeof(HealthStoryContext))]
    [Migration("20190129150805_Add-IsDeleted-for-entities")]
    partial class AddIsDeletedforentities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HealthStory.Web.Entities.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("AppUserId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("HealthStory.Web.Entities.AppUserBloodTestValue", b =>
                {
                    b.Property<int>("AppUserBloodTestValueId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppUserId");

                    b.Property<int>("BloodTestInfoId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("SubstanceInfoId");

                    b.Property<decimal>("Value");

                    b.HasKey("AppUserBloodTestValueId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BloodTestInfoId");

                    b.HasIndex("SubstanceInfoId");

                    b.ToTable("AppUserBloodTestValues");
                });

            modelBuilder.Entity("HealthStory.Web.Entities.BloodTestInfo", b =>
                {
                    b.Property<int>("BloodTestInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.HasKey("BloodTestInfoId");

                    b.ToTable("BloodTestsInfo");
                });

            modelBuilder.Entity("HealthStory.Web.Entities.BloodTestSubstanceInfo", b =>
                {
                    b.Property<int>("BloodTestInfoId");

                    b.Property<int>("SubstanceInfoId");

                    b.HasKey("BloodTestInfoId", "SubstanceInfoId");

                    b.HasIndex("SubstanceInfoId");

                    b.ToTable("BloodTestsSubstancesInfo");
                });

            modelBuilder.Entity("HealthStory.Web.Entities.SubstanceInfo", b =>
                {
                    b.Property<int>("SubstanceInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Max");

                    b.Property<decimal>("Min");

                    b.Property<string>("Name");

                    b.Property<int>("UnitId");

                    b.HasKey("SubstanceInfoId");

                    b.HasIndex("UnitId");

                    b.ToTable("SubstanceInfo");
                });

            modelBuilder.Entity("HealthStory.Web.Entities.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Shortcut");

                    b.HasKey("UnitId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("HealthStory.Web.Entities.AppUserBloodTestValue", b =>
                {
                    b.HasOne("HealthStory.Web.Entities.AppUser", "AppUser")
                        .WithMany("AppUserBloodTestValue")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthStory.Web.Entities.BloodTestInfo", "BloodTestInfo")
                        .WithMany("AppUserBloodTestValue")
                        .HasForeignKey("BloodTestInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthStory.Web.Entities.SubstanceInfo", "SubstanceInfo")
                        .WithMany("AppUserBloodTestValue")
                        .HasForeignKey("SubstanceInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthStory.Web.Entities.BloodTestSubstanceInfo", b =>
                {
                    b.HasOne("HealthStory.Web.Entities.BloodTestInfo", "BloodTestsInfo")
                        .WithMany("BloodTestsSubstancesInfo")
                        .HasForeignKey("BloodTestInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HealthStory.Web.Entities.SubstanceInfo", "SubstanceInfo")
                        .WithMany("BloodTestsSubstancesInfo")
                        .HasForeignKey("SubstanceInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthStory.Web.Entities.SubstanceInfo", b =>
                {
                    b.HasOne("HealthStory.Web.Entities.Unit", "Unit")
                        .WithMany("SubstanceInfo")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
